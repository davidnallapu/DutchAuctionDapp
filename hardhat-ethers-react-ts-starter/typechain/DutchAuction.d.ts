/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface DutchAuctionInterface extends ethers.utils.Interface {
  functions: {
    "bid()": FunctionFragment;
    "finalize()": FunctionFragment;
    "getAuctionStatus()": FunctionFragment;
    "getAuctionWinner()": FunctionFragment;
    "getBlockNumber()": FunctionFragment;
    "getCreationBlock()": FunctionFragment;
    "getCurrentPrice()": FunctionFragment;
    "getInitPrice()": FunctionFragment;
    "getJudgeAddress()": FunctionFragment;
    "getNumBlocksAuctionOpen()": FunctionFragment;
    "getOfferPriceDecrement()": FunctionFragment;
    "getOwner()": FunctionFragment;
    "getReservePrice()": FunctionFragment;
    "refund(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "bid", values?: undefined): string;
  encodeFunctionData(functionFragment: "finalize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAuctionStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionWinner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCreationBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInitPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getJudgeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumBlocksAuctionOpen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOfferPriceDecrement",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getReservePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refund",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "bid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "finalize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionWinner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreationBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInitPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getJudgeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumBlocksAuctionOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOfferPriceDecrement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReservePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;

  events: {};
}

export class DutchAuction extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DutchAuctionInterface;

  functions: {
    bid(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finalize(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAuctionStatus(overrides?: CallOverrides): Promise<[string]>;

    getAuctionWinner(overrides?: CallOverrides): Promise<[string]>;

    getBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCreationBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getInitPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getJudgeAddress(overrides?: CallOverrides): Promise<[string]>;

    getNumBlocksAuctionOpen(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOfferPriceDecrement(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOwner(overrides?: CallOverrides): Promise<[string]>;

    getReservePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    refund(
      refundAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  bid(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finalize(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAuctionStatus(overrides?: CallOverrides): Promise<string>;

  getAuctionWinner(overrides?: CallOverrides): Promise<string>;

  getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  getCreationBlock(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getInitPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getJudgeAddress(overrides?: CallOverrides): Promise<string>;

  getNumBlocksAuctionOpen(overrides?: CallOverrides): Promise<BigNumber>;

  getOfferPriceDecrement(overrides?: CallOverrides): Promise<BigNumber>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  getReservePrice(overrides?: CallOverrides): Promise<BigNumber>;

  refund(
    refundAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bid(overrides?: CallOverrides): Promise<string>;

    finalize(overrides?: CallOverrides): Promise<void>;

    getAuctionStatus(overrides?: CallOverrides): Promise<string>;

    getAuctionWinner(overrides?: CallOverrides): Promise<string>;

    getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getCreationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getInitPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getJudgeAddress(overrides?: CallOverrides): Promise<string>;

    getNumBlocksAuctionOpen(overrides?: CallOverrides): Promise<BigNumber>;

    getOfferPriceDecrement(overrides?: CallOverrides): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    getReservePrice(overrides?: CallOverrides): Promise<BigNumber>;

    refund(
      refundAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    bid(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finalize(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAuctionStatus(overrides?: CallOverrides): Promise<BigNumber>;

    getAuctionWinner(overrides?: CallOverrides): Promise<BigNumber>;

    getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getCreationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getInitPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getJudgeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getNumBlocksAuctionOpen(overrides?: CallOverrides): Promise<BigNumber>;

    getOfferPriceDecrement(overrides?: CallOverrides): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    getReservePrice(overrides?: CallOverrides): Promise<BigNumber>;

    refund(
      refundAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bid(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finalize(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAuctionStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAuctionWinner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCreationBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInitPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getJudgeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNumBlocksAuctionOpen(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOfferPriceDecrement(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReservePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refund(
      refundAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
